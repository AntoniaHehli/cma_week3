---
title: "Demonstration Sabi Ex. 3"
author: "Antonia Hehli"
format: html
---


```{r}
library(dplyr)
library(ggplot2)
library(magrittr)
library(readr)
library(sf)
```

# Demonstration Sabi

```{r}

wildschwein <- read_csv("wildschwein_BE_2056.csv")

wildschwein$TierName %>% unique()

as.POSIXct("2015-07-01", tz = "UTC")

sabi <- wildschwein %>%
  filter(TierName == "Sabi") %>%
  filter(DatetimeUTC >= as.POSIXct("2015-07-01", tz = "UTC"), 
         DatetimeUTC < as.POSIXct("2015-07-03", tz = "UTC"))

ggplot(sabi, aes(E, N, color = DatetimeUTC)) + 
  geom_point()+
  geom_path() + 
  coord_equal()
```

```{r}
sabi %>%
  head(50) %>%
  ggplot(aes(DatetimeUTC, 1)) +
  geom_point()

sabi <- sabi %>% 
  mutate(
    n_plus1 = sqrt((lead(E,1)-E)^2 + (lead(N,1)-N)^2),
    n_plus2 = sqrt((lead(E,2)-E)^2 + (lead(N,2)-N)^2),
    n_minus1 = sqrt((lag(E,1)-E)^2 + (lag(N,1)-N)^2),
    n_minus2 = sqrt((lag(E,2)-E)^2 + (lag(N,2)-N)^2)
    )

# It is normal that for "n_minus1", the first value is NA as there is no value before that.

sabi <- sabi %>%
  rowwise() %>%
  mutate(
    stepMean = mean(c(n_minus1, n_minus2, n_plus1, n_plus2))
    ) %>%
  ungroup() # otherwise the group by row effect would be persistent in the dataframe

ggplot(sabi, aes(stepMean)) +
  geom_histogram(binwidth = 10) + 
  geom_vline(xintercept = mean(sabi$stepMean, na.rm = TRUE))


# The static column should be true or false: If the stepMean is smaller than the mean of stepMean it is static.
sabi <- sabi %>% 
  mutate(static = stepMean < mean(stepMean, na.rm = TRUE))

ggplot(sabi, aes(E, N)) + 
  geom_path() +
  geom_point(aes(color = static)) +
  coord_fixed()

sabi_filter <- sabi %>%
    filter(!static)

sabi_filter %>%
    ggplot(aes(E, N)) +
    geom_path() +
    geom_point() +
    coord_fixed() +
    theme(legend.position = "bottom")

```

# Exercise preparation

```{r read posmo data}
# read the data
posmo <- read_delim("private_files/posmo_tracks.csv")

# keep only the necessary columns
posmo <- select(posmo, datetime, lon_x, lat_y)
```

```{r transform CRS}
# convert the data to an sf object and transform the coordinates to LV95
posmo <- st_as_sf(posmo, coords = c("lon_x","lat_y"), crs = 4326) %>%
  st_transform(2056)

# print the head to check if it worked
head(posmo)
```

```{r extract coordinates}
# extract the coordinates to have them in two separate columns
posmo_coordinates <- st_coordinates(posmo)

# bind the individual x- and y-coordinates to the sf data set
posmo <- cbind(posmo, posmo_coordinates)
```

```{r select one day}
posmo_filter <- posmo %>%
    filter(as.Date(datetime) == "2023-04-27")



```

# Task 1: Segmentation

The time interval was already chosen. I will just use all the data from the 26th of April 2023.

## b) Measuring distances

```{r measure distances}

posmo_filter %>%
  head(50) %>%
  ggplot(aes(datetime, 1)) +
  geom_point()

posmo_filter <- posmo_filter %>% 
  mutate(
    n_plus1 = sqrt((lead(X,1)-X)^2 + (lead(Y,1)-Y)^2),
    n_plus2 = sqrt((lead(X,2)-X)^2 + (lead(Y,2)-Y)^2),
    n_minus1 = sqrt((lag(X,1)-X)^2 + (lag(Y,1)-Y)^2),
    n_minus2 = sqrt((lag(X,2)-X)^2 + (lag(Y,2)-Y)^2)
    )
```

```{r row wise step mean}
posmo_filter <- posmo_filter %>%
    rowwise()  %>%
    mutate(
        stepMean = mean(c(n_minus1, n_minus2, n_plus1, n_plus2))
    )  %>%
    ungroup()
```

## c) Remove static points

```{r removing static points}
posmo_filter <- posmo_filter %>%
    ungroup() %>%
    mutate(static = stepMean < mean(stepMean, na.rm = TRUE))

posmo_filter_stat <- posmo_filter %>%
    filter(!static)

posmo_filter_stat %>%
    ggplot(aes(X, Y)) +
    geom_path() +
    geom_point() +
    coord_fixed() +
    theme(legend.position = "bottom")
```

# Task 2: Threshold d

```{r summary}
summary(posmo_filter$stepMean)
```

The summary function indicates that the mean step length is 91.58 meters. I also create a histogram to visualize the variation of the values. 

```{r histogram steplength}
ggplot(posmo_filter, aes(stepMean))+
  geom_histogram(binwidth = 10) + 
  labs(x = "Steplength [m]",
       y = "Count") +
  geom_vline(xintercept = mean(posmo_filter$stepMean, na.rm = TRUE)) +
  theme_minimal()
```

```{r threshold d}
posmo_filter <- posmo_filter %>%
    ungroup() %>%
    mutate(static = stepMean < mean(stepMean, na.rm = TRUE))
```

# Task 3: Visualization

```{r visualize trajectory}
posmo_filter %>%
  ggplot(aes(X, Y, color = static)) +
  geom_path() +
  geom_point() +
  coord_equal()+
  theme_minimal()
```

# Task 4: Segment-based analysis

```{r unique ID}
rle_id <- function(vec) {
    x <- rle(vec)$lengths
    as.factor(rep(seq_along(x), times = x))
}
```

```{r apply the rle_id function}

posmo_filter <- posmo_filter %>%
    mutate(segment_id = rle_id(static))

head(posmo_filter)
```

```{r}
# filter out static parts of the trajectory
posmo_filter_moving <- posmo_filter %>%
    filter(!static)

posmo_filter_moving %>%
  ggplot(aes(X, Y, color = segment_id)) +
  geom_path() +
  geom_point() +
  coord_equal()+
  theme_minimal()+
  theme(legend.position = "none")+ # remove the legend
  ggtitle("All segments (uncleaned)")
```

```{r remove short segments}
# calculate the time difference between each two fixes
posmo_filter_moving <- posmo_filter_moving %>% 
  mutate(
    timeDifference_s = as.numeric(lead(datetime, 1)-datetime)
    )

# calculate the total time difference for one segment
posmo_filter_moving <- posmo_filter_moving %>% 
  group_by(segment_id) %>%
  mutate(
    segmentTime_s = sum(timeDifference_s)
  ) %>%
  ungroup()

# filter for segments longer than 5 minutes
minutes <- 60*5 # convert one minute to seconds

posmo_filter_moving_long <- posmo_filter_moving %>%
    filter(!segmentTime_s < minutes) # remove all rows with a segment time smaller than 5 minutes

```

```{r visualization without short segments}
posmo_filter_moving_long %>%
  ggplot(aes(X, Y, color = segment_id)) +
  geom_path() +
  geom_point() +
  coord_equal()+
  theme_minimal()+
  theme(legend.position = "none")+ # remove the legend
  ggtitle("Long segments (removed segments < 5 minutes)")

```

# Task 5: Similarity measures

```{r read and explore pedestrians file}

pedestrians <- read_csv("pedestrian.csv")

pedestrians %>%
  ggplot(aes(E, N))+
  geom_path(aes(color = factor(TrajID)))+
  geom_point(aes(color = factor(TrajID)))+
  facet_wrap(~ TrajID, ncol = 3)+
  coord_equal()+
  theme_minimal()+
  labs(title = "Visual comparison of the 6 trajectories")+
  theme(legend.position = "none")

```




